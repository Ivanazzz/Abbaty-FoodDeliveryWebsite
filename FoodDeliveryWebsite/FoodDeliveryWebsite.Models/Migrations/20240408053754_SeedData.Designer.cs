// <auto-generated />
using System;
using FoodDeliveryWebsite.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodDeliveryWebsite.Models.Migrations
{
    [DbContext(typeof(FoodDeliveryWebsiteDbContext))]
    [Migration("20240408053754_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodDeliveryWebsite.Models.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApartmentNo")
                        .HasColumnType("integer")
                        .HasColumnName("apartmentno");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("city");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("integer")
                        .HasColumnName("creatoruserid");

                    b.Property<int?>("Floor")
                        .HasColumnType("integer")
                        .HasColumnName("floor");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("street");

                    b.Property<int>("StreetNo")
                        .HasColumnType("integer")
                        .HasColumnName("streetno");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("address");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "София",
                            CreateDate = new DateTime(2024, 1, 14, 11, 26, 26, 0, DateTimeKind.Utc),
                            CreatorUserId = 2,
                            Floor = 2,
                            IsDeleted = false,
                            Street = "Витоша",
                            StreetNo = 91,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            ApartmentNo = 6,
                            City = "Банкя",
                            CreateDate = new DateTime(2024, 3, 3, 12, 12, 12, 0, DateTimeKind.Utc),
                            CreatorUserId = 2,
                            Floor = 5,
                            IsDeleted = false,
                            Street = "Христо Ботев",
                            StreetNo = 28,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            City = "Бургас",
                            CreateDate = new DateTime(2024, 4, 1, 21, 18, 17, 0, DateTimeKind.Utc),
                            CreatorUserId = 3,
                            IsDeleted = false,
                            Street = "Славянска",
                            StreetNo = 13,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("FoodDeliveryWebsite.Models.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("integer")
                        .HasColumnName("creatoruserid");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expirationdate");

                    b.Property<int>("Percentage")
                        .HasColumnType("integer")
                        .HasColumnName("percentage");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startdate");

                    b.HasKey("Id");

                    b.ToTable("discount");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "year2024",
                            CreateDate = new DateTime(2023, 12, 15, 17, 21, 35, 0, DateTimeKind.Utc),
                            CreatorUserId = 1,
                            ExpirationDate = new DateTime(2024, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            Percentage = 24,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            Code = "summer20",
                            CreateDate = new DateTime(2023, 12, 17, 2, 5, 47, 0, DateTimeKind.Utc),
                            CreatorUserId = 1,
                            ExpirationDate = new DateTime(2024, 8, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            Percentage = 20,
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            Code = "april10",
                            CreateDate = new DateTime(2023, 12, 18, 2, 5, 47, 0, DateTimeKind.Utc),
                            CreatorUserId = 1,
                            ExpirationDate = new DateTime(2024, 4, 30, 23, 59, 59, 0, DateTimeKind.Utc),
                            Percentage = 10,
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("FoodDeliveryWebsite.Models.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("addressid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("integer")
                        .HasColumnName("creatoruserid");

                    b.Property<decimal>("DeliveryPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("deliveryprice");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("integer")
                        .HasColumnName("discountid");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("totalprice");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("UserId");

                    b.ToTable("order");
                });

            modelBuilder.Entity("FoodDeliveryWebsite.Models.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("integer")
                        .HasColumnName("creatoruserid");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("orderid");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("productid");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("productquantity");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("orderitem");
                });

            modelBuilder.Entity("FoodDeliveryWebsite.Models.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("integer")
                        .HasColumnName("creatoruserid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("Grams")
                        .HasColumnType("integer")
                        .HasColumnName("grams");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("bytea")
                        .HasColumnName("image");

                    b.Property<string>("ImageMimeType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("imagemimetype");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("imagename");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("product");
                });

            modelBuilder.Entity("FoodDeliveryWebsite.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdate");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("integer")
                        .HasColumnName("creatoruserid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("firstname");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phonenumber");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.HasKey("Id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 11, 2, 8, 20, 50, 0, DateTimeKind.Utc),
                            CreatorUserId = 0,
                            Email = "admin@gmail.com",
                            FirstName = "Админ",
                            Gender = 1,
                            IsDeleted = false,
                            LastName = "Админ",
                            Password = "41C396CABA416A55EF199EEF5BF18F2485378DD373764A50662B0BE863A218C107E5E3A7305A83A4EBD8A4F7493A79878A8F25F69057896D2CA1477214B31754",
                            PhoneNumber = "+359 99 9999 999",
                            Role = 1,
                            Salt = "8EB89F1556CB153CC0D048D70D3B59E03046A1B33EE056350BC3B965617FF54E6EE89B8E64DE705A05B49CDB80B4888BEF78DA7E4FD47FD20AC1EEADD238C8CE"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2024, 1, 13, 14, 4, 39, 0, DateTimeKind.Utc),
                            CreatorUserId = 0,
                            Email = "ivan@gmail.com",
                            FirstName = "Иван",
                            Gender = 1,
                            IsDeleted = false,
                            LastName = "Иванов",
                            Password = "5E79B341F17FCA086417D1CDBB0419F3F5ADD01D0908A0B331BA5BED403209DADD32DFD8533C56BF2394492D8923DC0B5ED6504803344AA804971B234DA294A8",
                            PhoneNumber = "+359 88 8888 888",
                            Role = 2,
                            Salt = "C0BFA2CEC43F2B8D90308BB9433B5DE0D5E74B36866DB81253F588AF8ED2815BC801CAF40EB2E4B10A1775D874602097B7358A8E10ABD9C35BEB87A0DFFAD3C6"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2024, 2, 14, 10, 21, 18, 0, DateTimeKind.Utc),
                            CreatorUserId = 0,
                            Email = "maria@abv.bg",
                            FirstName = "Мария",
                            Gender = 2,
                            IsDeleted = false,
                            LastName = "Петрова",
                            Password = "371E67B6847BA48915A2E37C3E1E98F3D8EEFE024EA0CD9C2DAA328743D3E4A87D5F746B80719F249C91311026438CFDA0A83718FEF8E0ED63924334325B8632",
                            PhoneNumber = "+359 77 7777 777",
                            Role = 2,
                            Salt = "2F785CBCB2BE890D21DA615BEC80A0C3B76C6DD8DC5621F5B7F12A6C668E2883819B470D4603B83295AC5BCBF7393394487199C28484051659B74EA71F3FA26E"
                        });
                });

            modelBuilder.Entity("FoodDeliveryWebsite.Models.Entities.Address", b =>
                {
                    b.HasOne("FoodDeliveryWebsite.Models.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryWebsite.Models.Entities.Order", b =>
                {
                    b.HasOne("FoodDeliveryWebsite.Models.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDeliveryWebsite.Models.Entities.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId");

                    b.HasOne("FoodDeliveryWebsite.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Discount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryWebsite.Models.Entities.OrderItem", b =>
                {
                    b.HasOne("FoodDeliveryWebsite.Models.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("FoodDeliveryWebsite.Models.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodDeliveryWebsite.Models.Entities.User", "User")
                        .WithMany("OrderItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodDeliveryWebsite.Models.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FoodDeliveryWebsite.Models.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
